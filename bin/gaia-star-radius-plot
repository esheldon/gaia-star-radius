#!/usr/bin/env python
import numpy as np
import fitsio
import hickory
import esutil as eu
from esutil.numpy_util import between
import ngmix


def get_quantile(bs, logr, quantile):

    nbin = bs['hist'].size
    qlogr = np.zeros(nbin)

    rev = bs['rev']
    for i in range(nbin):
        if rev[i] != rev[i+1]:
            w = rev[rev[i]:rev[i+1]]

            qlogr[i] = np.quantile(logr[w], quantile)

    return qlogr


def main():
    order = 2
    nbin = 20
    # rng = np.random.RandomState(34132)

    t = fitsio.read('gaia-star-radii.fits', lower=True)
    logr = np.log10(t['radius_pixels'])
    mag = t['phot_g_mean_mag']

    ylim = [np.log10(7), np.log10(800)]
    magmin, magmax = 5, 20

    tab = hickory.Table(
        figsize=(12, 10),
        nrows=2,
        ncols=2,
    )
    quantiles = [0.95, 0.99]
    qcolors = ['orange', 'cyan']

    xlabel = 'GAIA G [mag]'
    plys = {}
    for iband, band in enumerate(['r', 'i', 'z']):
        print('-'*70)
        print(band)

        plt = tab.axes[iband]
        plt.set(
            xlabel=xlabel,
            ylabel='log10 Mask radius %s-band [pixels]' % band,
            xlim=[magmin, magmax],
            ylim=ylim,
        )

        w, = np.where(
            (t['band'] == band) &
            between(mag, magmin, magmax) &
            between(logr, ylim[0], ylim[1])
        )
        print('found:', w.size)

        plt.hexbin(
            mag[w], logr[w],
            bins='log',
            cmap='Greens',
        )

        bs = eu.stat.Binner(mag[w], logr[w])
        bs.dohist(nbin=nbin, calc_stats=True)

        # print(bs['hist'])

        plt.errorbar(
            bs['xmean'], bs['ymean'], yerr=bs['yerr'], color='black', zorder=1,
        )

        xvals = np.linspace(magmin, magmax)

        coeffs = np.polyfit(bs['xmean'], bs['ymean'], order)
        ply = np.poly1d(coeffs)

        print(f'band: {band} mean')
        print(ngmix.print_pars(coeffs))
        plt.curve(xvals, ply(xvals), zorder=3, color='grey')
        plys[band] = ply

        for quantile, qcolor in zip(quantiles, qcolors):
            qlogr = get_quantile(bs, logr[w], quantile)
            plt.plot(
                bs['xmean'], qlogr, zorder=2, label=f'quantile {quantile:.2f}',
                color=qcolor,
            )

            coeffs = np.polyfit(bs['xmean'], qlogr, order)
            ply = np.poly1d(coeffs)
            print(f'band: {band} quantile: {quantile:.2f}')
            print(ngmix.print_pars(coeffs))
            # print(ply)

            plt.curve(xvals, ply(xvals), zorder=3, color=qcolor)

            # if band != 'r':
            #     tab[0, 0].curve(xvals, ply(xvals), zorder=3, alpha=0.4)

        if band == 'r':
            plt.legend()

    tab[1, 1].set(xlabel=xlabel, ylabel='poly ratio')

    rp = 10.0**(plys['r'](xvals))
    ip = 10.0**(plys['i'](xvals))
    zp = 10.0**(plys['z'](xvals))

    tab[1, 1].curve(xvals, ip/rp, label='i poly/r poly')
    tab[1, 1].curve(xvals, zp/rp, label='z poly/r poly')
    tab[1, 1].legend()

    pdfname = 'rad-vs-mag.pdf'
    print('writing:', pdfname)
    tab.savefig(pdfname)

    pngname = 'rad-vs-mag.png'
    print('writing:', pngname)
    tab.savefig(pngname, dpi=150)


if __name__ == '__main__':
    main()
